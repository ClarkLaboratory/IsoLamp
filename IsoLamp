#!/usr/bin/env bash

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
. $SCRIPT_DIR/bin/IsoLamp_functions.sh

# ------------------------------------------------- #
# Script setup
# ------------------------------------------------- #

parameters_file=""
mode=""

# Parse command-line options
# Options -p and -m
# -p params.ini
# -m mode

while getopts "p:m" opt
do
  case $opt in
    p)
      parameters_file="$OPTARG"
      ;;
    m)
      mode="$OPTARG"
      ;;
    #\?)
      #echo "Invalid option: -$OPTARG" >&2
      #exit 1
      #;;
    #:)
      #echo "Option -$OPTARG requires an argument." >&2
      #exit 1
      #;;
  esac
done

# Check if parameters file was provided
if [ -z "$parameters_file" ]
then
  echo "Please provide parameters file."
  echo "Usage: IsoLamp -p parameters.ini -m mode"
  exit 1
fi

# Check if mode was provided
#if [ -z "$mode" ]
#then
#  mode="default"
#fi

# Source parameters file
source "$parameters_file"

# Create logs file
	log_file="$OUTPUT_NAME/IsoLamp.logs"
	# function to redirect output to the log file
	function redirect_output() {
		# Redirect both stdout (1) and stderr (2) to the logs file
		{
			"$@"
		} >> "$log_file" 2>&1
	}

# ------------------------------------------------- #
# Define functions for each module
# ------------------------------------------------- #


# Create directories
function make_directories() {
	# if the $OUTPUT_NAME directory already exists, exit
	if [ -d $OUTPUT_NAME ] 
	then
		echo "$OUTPUT_NAME already exists"
		exit 1
	fi

	# make directories
	mkdir $OUTPUT_NAME
	mkdir $OUTPUT_NAME/temp_files

}

# Preprocessing
function preprocessing_module() {
	# filter input references
	filter_reference_files

	# check filetypes
	check_for_fastq_or_fasta_files
	concat_files

	# downsampling
	downsampling_function
}

# Mapping
function mapping_module() {
	# run minimap2
	mapping_genome_function
	extract_mapped_genome_reads
}

# Isoform discovery
function isoform_discovery_module() {
	# run JWR jecker python script
	get_accurate_reads
	get_JWRs

	# run bambu in R
	run_bambu_function
}

# Quantification and analysis
function quant_analysis_module() {
	# read count filter 
	read_count_function_first_pass

	# primer site filter
	primer_site_function

	# metatranscriptome with salmon
	create_metatranscriptome

	# remap to salmon metatranscriptome
	remapping_function

	# Rscript to combine quant.sf files and filter by read min counts
	combine_quants_function

	# some zero count isoforms result after the secound round of quants with salmon
	read_count_function_second_pass

	echo "Generating plots..."
	plot_PCA
	plot_accuracy 

	compare_proportions_test


	echo "Annotating isoforms..."
	# run with gffcompare
	gffcomp_function

	echo "Generating fasta file..."
	gffread -w $OUTPUT_NAME/transcripts.fa -g $OUTPUT_NAME/temp_files/filt_chr.fa $OUTPUT_NAME/${OUTPUT_NAME}_isoforms.gtf


	# make report txt file
	echo "Generating report..."
	generate_report_function

	# compress reads to save space
	gzip $OUTPUT_NAME/temp_files/reads/*
	gzip $OUTPUT_NAME/temp_files/mapped_reads/*

	if [ "$downsampling" == TRUE ]
	then
		gzip $OUTPUT_NAME/temp_files/downsampled_reads/*
	fi
}

echo \
"
██ ███████  ██████  ██       █████  ███    ███ ██████  
██ ██      ██    ██ ██      ██   ██ ████  ████ ██   ██ 
██ ███████ ██    ██ ██      ███████ ██ ████ ██ ██████  
██      ██ ██    ██ ██      ██   ██ ██  ██  ██ ██      
██ ███████  ██████  ███████ ██   ██ ██      ██ ██  
"

# version info
echo "v1.0"
echo "$mode"

# Depending on the mode, you might execute different parts of your script
case "$mode" in
  default)
  	make_directories
    preprocessing_module
	mapping_module
	isoform_discovery_module
	quant_analysis_module
	echo "Completed all modules"
    ;;
  preprocess_only)
	make_directories
    preprocessing_module
	echo "Completed modules: preprocessing"
    ;;
  mapping)
	mapping_module
	isoform_discovery_module
	quant_analysis_module
	echo "Completed modules: mapping, isoform_discovery, isoform_analysis"
    ;;
  isoform_discovery)
	isoform_discovery_module
	quant_analysis_module
	echo "Completed modules: isoform_discovery, isoform_analysis"
    ;;
  isoform_analysis)
	quant_analysis_module
	echo "Completed module: isoform_analysis"
    ;;
  *)
    echo "Invalid mode specified."
    exit 1
    ;;
esac
